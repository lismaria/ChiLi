{"version":3,"sources":["lib/angular-route.js"],"names":["window","angular","shallowCopy","src","dst","isArray","i","ii","length","isObject","key","charAt","routeToRegExp","path","opts","keys","pattern","replace","_","slash","option","optional","star","push","name","ignoreTrailingSlashes","regexp","RegExp","caseInsensitiveMatch","isDefined","noop","ngRouteModule","module","info","angularVersion","provider","$RouteProvider","run","instantiateRoute","$routeMinErr","$$minErr","isEagerInstantiationEnabled","inherit","parent","extra","extend","Object","create","routes","when","route","routeCopy","isUndefined","reloadOnUrl","reloadOnSearch","originalPath","redirectPath","substr","redirectTo","otherwise","params","eagerInstantiationEnabled","enabled","$get","$rootScope","$location","$routeParams","$q","$injector","$templateRequest","$sce","$browser","forceReload","preparedRoute","preparedRouteIsUpdateOnly","$route","reload","fakeLocationEvent","defaultPrevented","preventDefault","fakePreventDefault","$evalAsync","prepareRoute","commitRoute","updateParams","newParams","current","$$route","interpolate","search","$on","switchRouteMatcher","on","m","exec","len","val","$locationEvent","lastRoute","parseRoute","isNavigationUpdateOnly","$broadcast","nextRoute","copy","nextRoutePromise","resolve","$$incOutstandingRequestCount","then","getRedirectionData","handlePossibleRedirection","keepProcessingRoute","resolveLocals","locals","catch","error","finally","$$completeOutstandingRequest","data","hasRedirection","isString","oldPath","oldSearch","newUrl","pathParams","url","resolveRedirectTo","invoke","oldUrl","forEach","value","get","template","getTemplateFor","all","templateUrl","isFunction","loadedTemplateUrl","valueOf","match","newRoute","oldRoute","equals","string","result","split","segment","segmentMatch","join","$inject","$RouteParamsProvider","directive","ngViewFactory","ngViewFillContentFactory","$anchorScroll","$animate","restrict","terminal","priority","transclude","link","scope","$element","attr","ctrl","$transclude","currentScope","currentElement","previousLeaveAnimation","autoScrollExp","autoscroll","onloadExp","onload","update","cleanupLastView","cancel","$destroy","leave","done","response","$template","newScope","$new","clone","enter","onNgViewEnter","$eval","$emit","$compile","$controller","html","contents","controller","$scope","controllerAs","children","resolveAs"],"mappings":"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","file":"angular-route.49145ab9.js","sourceRoot":"..","sourcesContent":["/**\r\n * @license AngularJS v1.8.0\r\n * (c) 2010-2020 Google, Inc. http://angularjs.org\r\n * License: MIT\r\n */\r\n(function(window, angular) {'use strict';\r\n\r\n/* global shallowCopy: true */\r\n\r\n/**\r\n * Creates a shallow copy of an object, an array or a primitive.\r\n *\r\n * Assumes that there are no proto properties for objects.\r\n */\r\nfunction shallowCopy(src, dst) {\r\n  if (isArray(src)) {\r\n    dst = dst || [];\r\n\r\n    for (var i = 0, ii = src.length; i < ii; i++) {\r\n      dst[i] = src[i];\r\n    }\r\n  } else if (isObject(src)) {\r\n    dst = dst || {};\r\n\r\n    for (var key in src) {\r\n      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {\r\n        dst[key] = src[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  return dst || src;\r\n}\r\n\r\n/* global routeToRegExp: true */\r\n\r\n/**\r\n * @param {string} path - The path to parse. (It is assumed to have query and hash stripped off.)\r\n * @param {Object} opts - Options.\r\n * @return {Object} - An object containing an array of path parameter names (`keys`) and a regular\r\n *     expression (`regexp`) that can be used to identify a matching URL and extract the path\r\n *     parameter values.\r\n *\r\n * @description\r\n * Parses the given path, extracting path parameter names and a regular expression to match URLs.\r\n *\r\n * Originally inspired by `pathRexp` in `visionmedia/express/lib/utils.js`.\r\n */\r\nfunction routeToRegExp(path, opts) {\r\n  var keys = [];\r\n\r\n  var pattern = path\r\n    .replace(/([().])/g, '\\\\$1')\r\n    .replace(/(\\/)?:(\\w+)(\\*\\?|[?*])?/g, function(_, slash, key, option) {\r\n      var optional = option === '?' || option === '*?';\r\n      var star = option === '*' || option === '*?';\r\n      keys.push({name: key, optional: optional});\r\n      slash = slash || '';\r\n      return (\r\n        (optional ? '(?:' + slash : slash + '(?:') +\r\n        (star ? '(.+?)' : '([^/]+)') +\r\n        (optional ? '?)?' : ')')\r\n      );\r\n    })\r\n    .replace(/([/$*])/g, '\\\\$1');\r\n\r\n  if (opts.ignoreTrailingSlashes) {\r\n    pattern = pattern.replace(/\\/+$/, '') + '/*';\r\n  }\r\n\r\n  return {\r\n    keys: keys,\r\n    regexp: new RegExp(\r\n      '^' + pattern + '(?:[?#]|$)',\r\n      opts.caseInsensitiveMatch ? 'i' : ''\r\n    )\r\n  };\r\n}\r\n\r\n/* global routeToRegExp: false */\r\n/* global shallowCopy: false */\r\n\r\n// `isArray` and `isObject` are necessary for `shallowCopy()` (included via `src/shallowCopy.js`).\r\n// They are initialized inside the `$RouteProvider`, to ensure `window.angular` is available.\r\nvar isArray;\r\nvar isObject;\r\nvar isDefined;\r\nvar noop;\r\n\r\n/**\r\n * @ngdoc module\r\n * @name ngRoute\r\n * @description\r\n *\r\n * The `ngRoute` module provides routing and deeplinking services and directives for AngularJS apps.\r\n *\r\n * ## Example\r\n * See {@link ngRoute.$route#examples $route} for an example of configuring and using `ngRoute`.\r\n *\r\n */\r\n/* global -ngRouteModule */\r\nvar ngRouteModule = angular.\r\n  module('ngRoute', []).\r\n  info({ angularVersion: '1.8.0' }).\r\n  provider('$route', $RouteProvider).\r\n  // Ensure `$route` will be instantiated in time to capture the initial `$locationChangeSuccess`\r\n  // event (unless explicitly disabled). This is necessary in case `ngView` is included in an\r\n  // asynchronously loaded template.\r\n  run(instantiateRoute);\r\nvar $routeMinErr = angular.$$minErr('ngRoute');\r\nvar isEagerInstantiationEnabled;\r\n\r\n\r\n/**\r\n * @ngdoc provider\r\n * @name $routeProvider\r\n * @this\r\n *\r\n * @description\r\n *\r\n * Used for configuring routes.\r\n *\r\n * ## Example\r\n * See {@link ngRoute.$route#examples $route} for an example of configuring and using `ngRoute`.\r\n *\r\n * ## Dependencies\r\n * Requires the {@link ngRoute `ngRoute`} module to be installed.\r\n */\r\nfunction $RouteProvider() {\r\n  isArray = angular.isArray;\r\n  isObject = angular.isObject;\r\n  isDefined = angular.isDefined;\r\n  noop = angular.noop;\r\n\r\n  function inherit(parent, extra) {\r\n    return angular.extend(Object.create(parent), extra);\r\n  }\r\n\r\n  var routes = {};\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $routeProvider#when\r\n   *\r\n   * @param {string} path Route path (matched against `$location.path`). If `$location.path`\r\n   *    contains redundant trailing slash or is missing one, the route will still match and the\r\n   *    `$location.path` will be updated to add or drop the trailing slash to exactly match the\r\n   *    route definition.\r\n   *\r\n   *    * `path` can contain named groups starting with a colon: e.g. `:name`. All characters up\r\n   *        to the next slash are matched and stored in `$routeParams` under the given `name`\r\n   *        when the route matches.\r\n   *    * `path` can contain named groups starting with a colon and ending with a star:\r\n   *        e.g.`:name*`. All characters are eagerly stored in `$routeParams` under the given `name`\r\n   *        when the route matches.\r\n   *    * `path` can contain optional named groups with a question mark: e.g.`:name?`.\r\n   *\r\n   *    For example, routes like `/color/:color/largecode/:largecode*\\/edit` will match\r\n   *    `/color/brown/largecode/code/with/slashes/edit` and extract:\r\n   *\r\n   *    * `color: brown`\r\n   *    * `largecode: code/with/slashes`.\r\n   *\r\n   *\r\n   * @param {Object} route Mapping information to be assigned to `$route.current` on route\r\n   *    match.\r\n   *\r\n   *    Object properties:\r\n   *\r\n   *    - `controller` – `{(string|Function)=}` – Controller fn that should be associated with\r\n   *      newly created scope or the name of a {@link angular.Module#controller registered\r\n   *      controller} if passed as a string.\r\n   *    - `controllerAs` – `{string=}` – An identifier name for a reference to the controller.\r\n   *      If present, the controller will be published to scope under the `controllerAs` name.\r\n   *    - `template` – `{(string|Function)=}` – html template as a string or a function that\r\n   *      returns an html template as a string which should be used by {@link\r\n   *      ngRoute.directive:ngView ngView} or {@link ng.directive:ngInclude ngInclude} directives.\r\n   *      This property takes precedence over `templateUrl`.\r\n   *\r\n   *      If `template` is a function, it will be called with the following parameters:\r\n   *\r\n   *      - `{Array.<Object>}` - route parameters extracted from the current\r\n   *        `$location.path()` by applying the current route\r\n   *\r\n   *      One of `template` or `templateUrl` is required.\r\n   *\r\n   *    - `templateUrl` – `{(string|Function)=}` – path or function that returns a path to an html\r\n   *      template that should be used by {@link ngRoute.directive:ngView ngView}.\r\n   *\r\n   *      If `templateUrl` is a function, it will be called with the following parameters:\r\n   *\r\n   *      - `{Array.<Object>}` - route parameters extracted from the current\r\n   *        `$location.path()` by applying the current route\r\n   *\r\n   *      One of `templateUrl` or `template` is required.\r\n   *\r\n   *    - `resolve` - `{Object.<string, Function>=}` - An optional map of dependencies which should\r\n   *      be injected into the controller. If any of these dependencies are promises, the router\r\n   *      will wait for them all to be resolved or one to be rejected before the controller is\r\n   *      instantiated.\r\n   *      If all the promises are resolved successfully, the values of the resolved promises are\r\n   *      injected and {@link ngRoute.$route#$routeChangeSuccess $routeChangeSuccess} event is\r\n   *      fired. If any of the promises are rejected the\r\n   *      {@link ngRoute.$route#$routeChangeError $routeChangeError} event is fired.\r\n   *      For easier access to the resolved dependencies from the template, the `resolve` map will\r\n   *      be available on the scope of the route, under `$resolve` (by default) or a custom name\r\n   *      specified by the `resolveAs` property (see below). This can be particularly useful, when\r\n   *      working with {@link angular.Module#component components} as route templates.<br />\r\n   *      <div class=\"alert alert-warning\">\r\n   *        **Note:** If your scope already contains a property with this name, it will be hidden\r\n   *        or overwritten. Make sure, you specify an appropriate name for this property, that\r\n   *        does not collide with other properties on the scope.\r\n   *      </div>\r\n   *      The map object is:\r\n   *\r\n   *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n   *      - `factory` - `{string|Function}`: If `string` then it is an alias for a service.\r\n   *        Otherwise if function, then it is {@link auto.$injector#invoke injected}\r\n   *        and the return value is treated as the dependency. If the result is a promise, it is\r\n   *        resolved before its value is injected into the controller. Be aware that\r\n   *        `ngRoute.$routeParams` will still refer to the previous route within these resolve\r\n   *        functions.  Use `$route.current.params` to access the new route parameters, instead.\r\n   *\r\n   *    - `resolveAs` - `{string=}` - The name under which the `resolve` map will be available on\r\n   *      the scope of the route. If omitted, defaults to `$resolve`.\r\n   *\r\n   *    - `redirectTo` – `{(string|Function)=}` – value to update\r\n   *      {@link ng.$location $location} path with and trigger route redirection.\r\n   *\r\n   *      If `redirectTo` is a function, it will be called with the following parameters:\r\n   *\r\n   *      - `{Object.<string>}` - route parameters extracted from the current\r\n   *        `$location.path()` by applying the current route templateUrl.\r\n   *      - `{string}` - current `$location.path()`\r\n   *      - `{Object}` - current `$location.search()`\r\n   *\r\n   *      The custom `redirectTo` function is expected to return a string which will be used\r\n   *      to update `$location.url()`. If the function throws an error, no further processing will\r\n   *      take place and the {@link ngRoute.$route#$routeChangeError $routeChangeError} event will\r\n   *      be fired.\r\n   *\r\n   *      Routes that specify `redirectTo` will not have their controllers, template functions\r\n   *      or resolves called, the `$location` will be changed to the redirect url and route\r\n   *      processing will stop. The exception to this is if the `redirectTo` is a function that\r\n   *      returns `undefined`. In this case the route transition occurs as though there was no\r\n   *      redirection.\r\n   *\r\n   *    - `resolveRedirectTo` – `{Function=}` – a function that will (eventually) return the value\r\n   *      to update {@link ng.$location $location} URL with and trigger route redirection. In\r\n   *      contrast to `redirectTo`, dependencies can be injected into `resolveRedirectTo` and the\r\n   *      return value can be either a string or a promise that will be resolved to a string.\r\n   *\r\n   *      Similar to `redirectTo`, if the return value is `undefined` (or a promise that gets\r\n   *      resolved to `undefined`), no redirection takes place and the route transition occurs as\r\n   *      though there was no redirection.\r\n   *\r\n   *      If the function throws an error or the returned promise gets rejected, no further\r\n   *      processing will take place and the\r\n   *      {@link ngRoute.$route#$routeChangeError $routeChangeError} event will be fired.\r\n   *\r\n   *      `redirectTo` takes precedence over `resolveRedirectTo`, so specifying both on the same\r\n   *      route definition, will cause the latter to be ignored.\r\n   *\r\n   *    - `[reloadOnUrl=true]` - `{boolean=}` - reload route when any part of the URL changes\r\n   *      (including the path) even if the new URL maps to the same route.\r\n   *\r\n   *      If the option is set to `false` and the URL in the browser changes, but the new URL maps\r\n   *      to the same route, then a `$routeUpdate` event is broadcasted on the root scope (without\r\n   *      reloading the route).\r\n   *\r\n   *    - `[reloadOnSearch=true]` - `{boolean=}` - reload route when only `$location.search()`\r\n   *      or `$location.hash()` changes.\r\n   *\r\n   *      If the option is set to `false` and the URL in the browser changes, then a `$routeUpdate`\r\n   *      event is broadcasted on the root scope (without reloading the route).\r\n   *\r\n   *      <div class=\"alert alert-warning\">\r\n   *        **Note:** This option has no effect if `reloadOnUrl` is set to `false`.\r\n   *      </div>\r\n   *\r\n   *    - `[caseInsensitiveMatch=false]` - `{boolean=}` - match routes without being case sensitive\r\n   *\r\n   *      If the option is set to `true`, then the particular route can be matched without being\r\n   *      case sensitive\r\n   *\r\n   * @returns {Object} self\r\n   *\r\n   * @description\r\n   * Adds a new route definition to the `$route` service.\r\n   */\r\n  this.when = function(path, route) {\r\n    //copy original route object to preserve params inherited from proto chain\r\n    var routeCopy = shallowCopy(route);\r\n    if (angular.isUndefined(routeCopy.reloadOnUrl)) {\r\n      routeCopy.reloadOnUrl = true;\r\n    }\r\n    if (angular.isUndefined(routeCopy.reloadOnSearch)) {\r\n      routeCopy.reloadOnSearch = true;\r\n    }\r\n    if (angular.isUndefined(routeCopy.caseInsensitiveMatch)) {\r\n      routeCopy.caseInsensitiveMatch = this.caseInsensitiveMatch;\r\n    }\r\n    routes[path] = angular.extend(\r\n      routeCopy,\r\n      {originalPath: path},\r\n      path && routeToRegExp(path, routeCopy)\r\n    );\r\n\r\n    // create redirection for trailing slashes\r\n    if (path) {\r\n      var redirectPath = (path[path.length - 1] === '/')\r\n            ? path.substr(0, path.length - 1)\r\n            : path + '/';\r\n\r\n      routes[redirectPath] = angular.extend(\r\n        {originalPath: path, redirectTo: path},\r\n        routeToRegExp(redirectPath, routeCopy)\r\n      );\r\n    }\r\n\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * @ngdoc property\r\n   * @name $routeProvider#caseInsensitiveMatch\r\n   * @description\r\n   *\r\n   * A boolean property indicating if routes defined\r\n   * using this provider should be matched using a case insensitive\r\n   * algorithm. Defaults to `false`.\r\n   */\r\n  this.caseInsensitiveMatch = false;\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $routeProvider#otherwise\r\n   *\r\n   * @description\r\n   * Sets route definition that will be used on route change when no other route definition\r\n   * is matched.\r\n   *\r\n   * @param {Object|string} params Mapping information to be assigned to `$route.current`.\r\n   * If called with a string, the value maps to `redirectTo`.\r\n   * @returns {Object} self\r\n   */\r\n  this.otherwise = function(params) {\r\n    if (typeof params === 'string') {\r\n      params = {redirectTo: params};\r\n    }\r\n    this.when(null, params);\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $routeProvider#eagerInstantiationEnabled\r\n   * @kind function\r\n   *\r\n   * @description\r\n   * Call this method as a setter to enable/disable eager instantiation of the\r\n   * {@link ngRoute.$route $route} service upon application bootstrap. You can also call it as a\r\n   * getter (i.e. without any arguments) to get the current value of the\r\n   * `eagerInstantiationEnabled` flag.\r\n   *\r\n   * Instantiating `$route` early is necessary for capturing the initial\r\n   * {@link ng.$location#$locationChangeStart $locationChangeStart} event and navigating to the\r\n   * appropriate route. Usually, `$route` is instantiated in time by the\r\n   * {@link ngRoute.ngView ngView} directive. Yet, in cases where `ngView` is included in an\r\n   * asynchronously loaded template (e.g. in another directive's template), the directive factory\r\n   * might not be called soon enough for `$route` to be instantiated _before_ the initial\r\n   * `$locationChangeSuccess` event is fired. Eager instantiation ensures that `$route` is always\r\n   * instantiated in time, regardless of when `ngView` will be loaded.\r\n   *\r\n   * The default value is true.\r\n   *\r\n   * **Note**:<br />\r\n   * You may want to disable the default behavior when unit-testing modules that depend on\r\n   * `ngRoute`, in order to avoid an unexpected request for the default route's template.\r\n   *\r\n   * @param {boolean=} enabled - If provided, update the internal `eagerInstantiationEnabled` flag.\r\n   *\r\n   * @returns {*} The current value of the `eagerInstantiationEnabled` flag if used as a getter or\r\n   *     itself (for chaining) if used as a setter.\r\n   */\r\n  isEagerInstantiationEnabled = true;\r\n  this.eagerInstantiationEnabled = function eagerInstantiationEnabled(enabled) {\r\n    if (isDefined(enabled)) {\r\n      isEagerInstantiationEnabled = enabled;\r\n      return this;\r\n    }\r\n\r\n    return isEagerInstantiationEnabled;\r\n  };\r\n\r\n\r\n  this.$get = ['$rootScope',\r\n               '$location',\r\n               '$routeParams',\r\n               '$q',\r\n               '$injector',\r\n               '$templateRequest',\r\n               '$sce',\r\n               '$browser',\r\n      function($rootScope, $location, $routeParams, $q, $injector, $templateRequest, $sce, $browser) {\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name $route\r\n     * @requires $location\r\n     * @requires $routeParams\r\n     *\r\n     * @property {Object} current Reference to the current route definition.\r\n     * The route definition contains:\r\n     *\r\n     *   - `controller`: The controller constructor as defined in the route definition.\r\n     *   - `locals`: A map of locals which is used by {@link ng.$controller $controller} service for\r\n     *     controller instantiation. The `locals` contain\r\n     *     the resolved values of the `resolve` map. Additionally the `locals` also contain:\r\n     *\r\n     *     - `$scope` - The current route scope.\r\n     *     - `$template` - The current route template HTML.\r\n     *\r\n     *     The `locals` will be assigned to the route scope's `$resolve` property. You can override\r\n     *     the property name, using `resolveAs` in the route definition. See\r\n     *     {@link ngRoute.$routeProvider $routeProvider} for more info.\r\n     *\r\n     * @property {Object} routes Object with all route configuration Objects as its properties.\r\n     *\r\n     * @description\r\n     * `$route` is used for deep-linking URLs to controllers and views (HTML partials).\r\n     * It watches `$location.url()` and tries to map the path to an existing route definition.\r\n     *\r\n     * Requires the {@link ngRoute `ngRoute`} module to be installed.\r\n     *\r\n     * You can define routes through {@link ngRoute.$routeProvider $routeProvider}'s API.\r\n     *\r\n     * The `$route` service is typically used in conjunction with the\r\n     * {@link ngRoute.directive:ngView `ngView`} directive and the\r\n     * {@link ngRoute.$routeParams `$routeParams`} service.\r\n     *\r\n     * @example\r\n     * This example shows how changing the URL hash causes the `$route` to match a route against the\r\n     * URL, and the `ngView` pulls in the partial.\r\n     *\r\n     * <example name=\"$route-service\" module=\"ngRouteExample\"\r\n     *          deps=\"angular-route.js\" fixBase=\"true\">\r\n     *   <file name=\"index.html\">\r\n     *     <div ng-controller=\"MainController\">\r\n     *       Choose:\r\n     *       <a href=\"Book/Moby\">Moby</a> |\r\n     *       <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\r\n     *       <a href=\"Book/Gatsby\">Gatsby</a> |\r\n     *       <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\r\n     *       <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\r\n     *\r\n     *       <div ng-view></div>\r\n     *\r\n     *       <hr />\r\n     *\r\n     *       <pre>$location.path() = {{$location.path()}}</pre>\r\n     *       <pre>$route.current.templateUrl = {{$route.current.templateUrl}}</pre>\r\n     *       <pre>$route.current.params = {{$route.current.params}}</pre>\r\n     *       <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>\r\n     *       <pre>$routeParams = {{$routeParams}}</pre>\r\n     *     </div>\r\n     *   </file>\r\n     *\r\n     *   <file name=\"book.html\">\r\n     *     controller: {{name}}<br />\r\n     *     Book Id: {{params.bookId}}<br />\r\n     *   </file>\r\n     *\r\n     *   <file name=\"chapter.html\">\r\n     *     controller: {{name}}<br />\r\n     *     Book Id: {{params.bookId}}<br />\r\n     *     Chapter Id: {{params.chapterId}}\r\n     *   </file>\r\n     *\r\n     *   <file name=\"script.js\">\r\n     *     angular.module('ngRouteExample', ['ngRoute'])\r\n     *\r\n     *      .controller('MainController', function($scope, $route, $routeParams, $location) {\r\n     *          $scope.$route = $route;\r\n     *          $scope.$location = $location;\r\n     *          $scope.$routeParams = $routeParams;\r\n     *      })\r\n     *\r\n     *      .controller('BookController', function($scope, $routeParams) {\r\n     *          $scope.name = 'BookController';\r\n     *          $scope.params = $routeParams;\r\n     *      })\r\n     *\r\n     *      .controller('ChapterController', function($scope, $routeParams) {\r\n     *          $scope.name = 'ChapterController';\r\n     *          $scope.params = $routeParams;\r\n     *      })\r\n     *\r\n     *     .config(function($routeProvider, $locationProvider) {\r\n     *       $routeProvider\r\n     *        .when('/Book/:bookId', {\r\n     *         templateUrl: 'book.html',\r\n     *         controller: 'BookController',\r\n     *         resolve: {\r\n     *           // I will cause a 1 second delay\r\n     *           delay: function($q, $timeout) {\r\n     *             var delay = $q.defer();\r\n     *             $timeout(delay.resolve, 1000);\r\n     *             return delay.promise;\r\n     *           }\r\n     *         }\r\n     *       })\r\n     *       .when('/Book/:bookId/ch/:chapterId', {\r\n     *         templateUrl: 'chapter.html',\r\n     *         controller: 'ChapterController'\r\n     *       });\r\n     *\r\n     *       // configure html5 to get links working on jsfiddle\r\n     *       $locationProvider.html5Mode(true);\r\n     *     });\r\n     *\r\n     *   </file>\r\n     *\r\n     *   <file name=\"protractor.js\" type=\"protractor\">\r\n     *     it('should load and compile correct template', function() {\r\n     *       element(by.linkText('Moby: Ch1')).click();\r\n     *       var content = element(by.css('[ng-view]')).getText();\r\n     *       expect(content).toMatch(/controller: ChapterController/);\r\n     *       expect(content).toMatch(/Book Id: Moby/);\r\n     *       expect(content).toMatch(/Chapter Id: 1/);\r\n     *\r\n     *       element(by.partialLinkText('Scarlet')).click();\r\n     *\r\n     *       content = element(by.css('[ng-view]')).getText();\r\n     *       expect(content).toMatch(/controller: BookController/);\r\n     *       expect(content).toMatch(/Book Id: Scarlet/);\r\n     *     });\r\n     *   </file>\r\n     * </example>\r\n     */\r\n\r\n    /**\r\n     * @ngdoc event\r\n     * @name $route#$routeChangeStart\r\n     * @eventType broadcast on root scope\r\n     * @description\r\n     * Broadcasted before a route change. At this  point the route services starts\r\n     * resolving all of the dependencies needed for the route change to occur.\r\n     * Typically this involves fetching the view template as well as any dependencies\r\n     * defined in `resolve` route property. Once  all of the dependencies are resolved\r\n     * `$routeChangeSuccess` is fired.\r\n     *\r\n     * The route change (and the `$location` change that triggered it) can be prevented\r\n     * by calling `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on}\r\n     * for more details about event object.\r\n     *\r\n     * @param {Object} angularEvent Synthetic event object.\r\n     * @param {Route} next Future route information.\r\n     * @param {Route} current Current route information.\r\n     */\r\n\r\n    /**\r\n     * @ngdoc event\r\n     * @name $route#$routeChangeSuccess\r\n     * @eventType broadcast on root scope\r\n     * @description\r\n     * Broadcasted after a route change has happened successfully.\r\n     * The `resolve` dependencies are now available in the `current.locals` property.\r\n     *\r\n     * {@link ngRoute.directive:ngView ngView} listens for the directive\r\n     * to instantiate the controller and render the view.\r\n     *\r\n     * @param {Object} angularEvent Synthetic event object.\r\n     * @param {Route} current Current route information.\r\n     * @param {Route|Undefined} previous Previous route information, or undefined if current is\r\n     * first route entered.\r\n     */\r\n\r\n    /**\r\n     * @ngdoc event\r\n     * @name $route#$routeChangeError\r\n     * @eventType broadcast on root scope\r\n     * @description\r\n     * Broadcasted if a redirection function fails or any redirection or resolve promises are\r\n     * rejected.\r\n     *\r\n     * @param {Object} angularEvent Synthetic event object\r\n     * @param {Route} current Current route information.\r\n     * @param {Route} previous Previous route information.\r\n     * @param {Route} rejection The thrown error or the rejection reason of the promise. Usually\r\n     * the rejection reason is the error that caused the promise to get rejected.\r\n     */\r\n\r\n    /**\r\n     * @ngdoc event\r\n     * @name $route#$routeUpdate\r\n     * @eventType broadcast on root scope\r\n     * @description\r\n     * Broadcasted if the same instance of a route (including template, controller instance,\r\n     * resolved dependencies, etc.) is being reused. This can happen if either `reloadOnSearch` or\r\n     * `reloadOnUrl` has been set to `false`.\r\n     *\r\n     * @param {Object} angularEvent Synthetic event object\r\n     * @param {Route} current Current/previous route information.\r\n     */\r\n\r\n    var forceReload = false,\r\n        preparedRoute,\r\n        preparedRouteIsUpdateOnly,\r\n        $route = {\r\n          routes: routes,\r\n\r\n          /**\r\n           * @ngdoc method\r\n           * @name $route#reload\r\n           *\r\n           * @description\r\n           * Causes `$route` service to reload the current route even if\r\n           * {@link ng.$location $location} hasn't changed.\r\n           *\r\n           * As a result of that, {@link ngRoute.directive:ngView ngView}\r\n           * creates new scope and reinstantiates the controller.\r\n           */\r\n          reload: function() {\r\n            forceReload = true;\r\n\r\n            var fakeLocationEvent = {\r\n              defaultPrevented: false,\r\n              preventDefault: function fakePreventDefault() {\r\n                this.defaultPrevented = true;\r\n                forceReload = false;\r\n              }\r\n            };\r\n\r\n            $rootScope.$evalAsync(function() {\r\n              prepareRoute(fakeLocationEvent);\r\n              if (!fakeLocationEvent.defaultPrevented) commitRoute();\r\n            });\r\n          },\r\n\r\n          /**\r\n           * @ngdoc method\r\n           * @name $route#updateParams\r\n           *\r\n           * @description\r\n           * Causes `$route` service to update the current URL, replacing\r\n           * current route parameters with those specified in `newParams`.\r\n           * Provided property names that match the route's path segment\r\n           * definitions will be interpolated into the location's path, while\r\n           * remaining properties will be treated as query params.\r\n           *\r\n           * @param {!Object<string, string>} newParams mapping of URL parameter names to values\r\n           */\r\n          updateParams: function(newParams) {\r\n            if (this.current && this.current.$$route) {\r\n              newParams = angular.extend({}, this.current.params, newParams);\r\n              $location.path(interpolate(this.current.$$route.originalPath, newParams));\r\n              // interpolate modifies newParams, only query params are left\r\n              $location.search(newParams);\r\n            } else {\r\n              throw $routeMinErr('norout', 'Tried updating route with no current route');\r\n            }\r\n          }\r\n        };\r\n\r\n    $rootScope.$on('$locationChangeStart', prepareRoute);\r\n    $rootScope.$on('$locationChangeSuccess', commitRoute);\r\n\r\n    return $route;\r\n\r\n    /////////////////////////////////////////////////////\r\n\r\n    /**\r\n     * @param on {string} current url\r\n     * @param route {Object} route regexp to match the url against\r\n     * @return {?Object}\r\n     *\r\n     * @description\r\n     * Check if the route matches the current url.\r\n     *\r\n     * Inspired by match in\r\n     * visionmedia/express/lib/router/router.js.\r\n     */\r\n    function switchRouteMatcher(on, route) {\r\n      var keys = route.keys,\r\n          params = {};\r\n\r\n      if (!route.regexp) return null;\r\n\r\n      var m = route.regexp.exec(on);\r\n      if (!m) return null;\r\n\r\n      for (var i = 1, len = m.length; i < len; ++i) {\r\n        var key = keys[i - 1];\r\n\r\n        var val = m[i];\r\n\r\n        if (key && val) {\r\n          params[key.name] = val;\r\n        }\r\n      }\r\n      return params;\r\n    }\r\n\r\n    function prepareRoute($locationEvent) {\r\n      var lastRoute = $route.current;\r\n\r\n      preparedRoute = parseRoute();\r\n      preparedRouteIsUpdateOnly = isNavigationUpdateOnly(preparedRoute, lastRoute);\r\n\r\n      if (!preparedRouteIsUpdateOnly && (lastRoute || preparedRoute)) {\r\n        if ($rootScope.$broadcast('$routeChangeStart', preparedRoute, lastRoute).defaultPrevented) {\r\n          if ($locationEvent) {\r\n            $locationEvent.preventDefault();\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    function commitRoute() {\r\n      var lastRoute = $route.current;\r\n      var nextRoute = preparedRoute;\r\n\r\n      if (preparedRouteIsUpdateOnly) {\r\n        lastRoute.params = nextRoute.params;\r\n        angular.copy(lastRoute.params, $routeParams);\r\n        $rootScope.$broadcast('$routeUpdate', lastRoute);\r\n      } else if (nextRoute || lastRoute) {\r\n        forceReload = false;\r\n        $route.current = nextRoute;\r\n\r\n        var nextRoutePromise = $q.resolve(nextRoute);\r\n\r\n        $browser.$$incOutstandingRequestCount('$route');\r\n\r\n        nextRoutePromise.\r\n          then(getRedirectionData).\r\n          then(handlePossibleRedirection).\r\n          then(function(keepProcessingRoute) {\r\n            return keepProcessingRoute && nextRoutePromise.\r\n              then(resolveLocals).\r\n              then(function(locals) {\r\n                // after route change\r\n                if (nextRoute === $route.current) {\r\n                  if (nextRoute) {\r\n                    nextRoute.locals = locals;\r\n                    angular.copy(nextRoute.params, $routeParams);\r\n                  }\r\n                  $rootScope.$broadcast('$routeChangeSuccess', nextRoute, lastRoute);\r\n                }\r\n              });\r\n          }).catch(function(error) {\r\n            if (nextRoute === $route.current) {\r\n              $rootScope.$broadcast('$routeChangeError', nextRoute, lastRoute, error);\r\n            }\r\n          }).finally(function() {\r\n            // Because `commitRoute()` is called from a `$rootScope.$evalAsync` block (see\r\n            // `$locationWatch`), this `$$completeOutstandingRequest()` call will not cause\r\n            // `outstandingRequestCount` to hit zero.  This is important in case we are redirecting\r\n            // to a new route which also requires some asynchronous work.\r\n\r\n            $browser.$$completeOutstandingRequest(noop, '$route');\r\n          });\r\n      }\r\n    }\r\n\r\n    function getRedirectionData(route) {\r\n      var data = {\r\n        route: route,\r\n        hasRedirection: false\r\n      };\r\n\r\n      if (route) {\r\n        if (route.redirectTo) {\r\n          if (angular.isString(route.redirectTo)) {\r\n            data.path = interpolate(route.redirectTo, route.params);\r\n            data.search = route.params;\r\n            data.hasRedirection = true;\r\n          } else {\r\n            var oldPath = $location.path();\r\n            var oldSearch = $location.search();\r\n            var newUrl = route.redirectTo(route.pathParams, oldPath, oldSearch);\r\n\r\n            if (angular.isDefined(newUrl)) {\r\n              data.url = newUrl;\r\n              data.hasRedirection = true;\r\n            }\r\n          }\r\n        } else if (route.resolveRedirectTo) {\r\n          return $q.\r\n            resolve($injector.invoke(route.resolveRedirectTo)).\r\n            then(function(newUrl) {\r\n              if (angular.isDefined(newUrl)) {\r\n                data.url = newUrl;\r\n                data.hasRedirection = true;\r\n              }\r\n\r\n              return data;\r\n            });\r\n        }\r\n      }\r\n\r\n      return data;\r\n    }\r\n\r\n    function handlePossibleRedirection(data) {\r\n      var keepProcessingRoute = true;\r\n\r\n      if (data.route !== $route.current) {\r\n        keepProcessingRoute = false;\r\n      } else if (data.hasRedirection) {\r\n        var oldUrl = $location.url();\r\n        var newUrl = data.url;\r\n\r\n        if (newUrl) {\r\n          $location.\r\n            url(newUrl).\r\n            replace();\r\n        } else {\r\n          newUrl = $location.\r\n            path(data.path).\r\n            search(data.search).\r\n            replace().\r\n            url();\r\n        }\r\n\r\n        if (newUrl !== oldUrl) {\r\n          // Exit out and don't process current next value,\r\n          // wait for next location change from redirect\r\n          keepProcessingRoute = false;\r\n        }\r\n      }\r\n\r\n      return keepProcessingRoute;\r\n    }\r\n\r\n    function resolveLocals(route) {\r\n      if (route) {\r\n        var locals = angular.extend({}, route.resolve);\r\n        angular.forEach(locals, function(value, key) {\r\n          locals[key] = angular.isString(value) ?\r\n              $injector.get(value) :\r\n              $injector.invoke(value, null, null, key);\r\n        });\r\n        var template = getTemplateFor(route);\r\n        if (angular.isDefined(template)) {\r\n          locals['$template'] = template;\r\n        }\r\n        return $q.all(locals);\r\n      }\r\n    }\r\n\r\n    function getTemplateFor(route) {\r\n      var template, templateUrl;\r\n      if (angular.isDefined(template = route.template)) {\r\n        if (angular.isFunction(template)) {\r\n          template = template(route.params);\r\n        }\r\n      } else if (angular.isDefined(templateUrl = route.templateUrl)) {\r\n        if (angular.isFunction(templateUrl)) {\r\n          templateUrl = templateUrl(route.params);\r\n        }\r\n        if (angular.isDefined(templateUrl)) {\r\n          route.loadedTemplateUrl = $sce.valueOf(templateUrl);\r\n          template = $templateRequest(templateUrl);\r\n        }\r\n      }\r\n      return template;\r\n    }\r\n\r\n    /**\r\n     * @returns {Object} the current active route, by matching it against the URL\r\n     */\r\n    function parseRoute() {\r\n      // Match a route\r\n      var params, match;\r\n      angular.forEach(routes, function(route, path) {\r\n        if (!match && (params = switchRouteMatcher($location.path(), route))) {\r\n          match = inherit(route, {\r\n            params: angular.extend({}, $location.search(), params),\r\n            pathParams: params});\r\n          match.$$route = route;\r\n        }\r\n      });\r\n      // No route matched; fallback to \"otherwise\" route\r\n      return match || routes[null] && inherit(routes[null], {params: {}, pathParams:{}});\r\n    }\r\n\r\n    /**\r\n     * @param {Object} newRoute - The new route configuration (as returned by `parseRoute()`).\r\n     * @param {Object} oldRoute - The previous route configuration (as returned by `parseRoute()`).\r\n     * @returns {boolean} Whether this is an \"update-only\" navigation, i.e. the URL maps to the same\r\n     *                    route and it can be reused (based on the config and the type of change).\r\n     */\r\n    function isNavigationUpdateOnly(newRoute, oldRoute) {\r\n      // IF this is not a forced reload\r\n      return !forceReload\r\n          // AND both `newRoute`/`oldRoute` are defined\r\n          && newRoute && oldRoute\r\n          // AND they map to the same Route Definition Object\r\n          && (newRoute.$$route === oldRoute.$$route)\r\n          // AND `reloadOnUrl` is disabled\r\n          && (!newRoute.reloadOnUrl\r\n              // OR `reloadOnSearch` is disabled\r\n              || (!newRoute.reloadOnSearch\r\n                  // AND both routes have the same path params\r\n                  && angular.equals(newRoute.pathParams, oldRoute.pathParams)\r\n              )\r\n          );\r\n    }\r\n\r\n    /**\r\n     * @returns {string} interpolation of the redirect path with the parameters\r\n     */\r\n    function interpolate(string, params) {\r\n      var result = [];\r\n      angular.forEach((string || '').split(':'), function(segment, i) {\r\n        if (i === 0) {\r\n          result.push(segment);\r\n        } else {\r\n          var segmentMatch = segment.match(/(\\w+)(?:[?*])?(.*)/);\r\n          var key = segmentMatch[1];\r\n          result.push(params[key]);\r\n          result.push(segmentMatch[2] || '');\r\n          delete params[key];\r\n        }\r\n      });\r\n      return result.join('');\r\n    }\r\n  }];\r\n}\r\n\r\ninstantiateRoute.$inject = ['$injector'];\r\nfunction instantiateRoute($injector) {\r\n  if (isEagerInstantiationEnabled) {\r\n    // Instantiate `$route`\r\n    $injector.get('$route');\r\n  }\r\n}\r\n\r\nngRouteModule.provider('$routeParams', $RouteParamsProvider);\r\n\r\n\r\n/**\r\n * @ngdoc service\r\n * @name $routeParams\r\n * @requires $route\r\n * @this\r\n *\r\n * @description\r\n * The `$routeParams` service allows you to retrieve the current set of route parameters.\r\n *\r\n * Requires the {@link ngRoute `ngRoute`} module to be installed.\r\n *\r\n * The route parameters are a combination of {@link ng.$location `$location`}'s\r\n * {@link ng.$location#search `search()`} and {@link ng.$location#path `path()`}.\r\n * The `path` parameters are extracted when the {@link ngRoute.$route `$route`} path is matched.\r\n *\r\n * In case of parameter name collision, `path` params take precedence over `search` params.\r\n *\r\n * The service guarantees that the identity of the `$routeParams` object will remain unchanged\r\n * (but its properties will likely change) even when a route change occurs.\r\n *\r\n * Note that the `$routeParams` are only updated *after* a route change completes successfully.\r\n * This means that you cannot rely on `$routeParams` being correct in route resolve functions.\r\n * Instead you can use `$route.current.params` to access the new route's parameters.\r\n *\r\n * @example\r\n * ```js\r\n *  // Given:\r\n *  // URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby\r\n *  // Route: /Chapter/:chapterId/Section/:sectionId\r\n *  //\r\n *  // Then\r\n *  $routeParams ==> {chapterId:'1', sectionId:'2', search:'moby'}\r\n * ```\r\n */\r\nfunction $RouteParamsProvider() {\r\n  this.$get = function() { return {}; };\r\n}\r\n\r\nngRouteModule.directive('ngView', ngViewFactory);\r\nngRouteModule.directive('ngView', ngViewFillContentFactory);\r\n\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name ngView\r\n * @restrict ECA\r\n *\r\n * @description\r\n * `ngView` is a directive that complements the {@link ngRoute.$route $route} service by\r\n * including the rendered template of the current route into the main layout (`index.html`) file.\r\n * Every time the current route changes, the included view changes with it according to the\r\n * configuration of the `$route` service.\r\n *\r\n * Requires the {@link ngRoute `ngRoute`} module to be installed.\r\n *\r\n * @animations\r\n * | Animation                        | Occurs                              |\r\n * |----------------------------------|-------------------------------------|\r\n * | {@link ng.$animate#enter enter}  | when the new element is inserted to the DOM |\r\n * | {@link ng.$animate#leave leave}  | when the old element is removed from to the DOM  |\r\n *\r\n * The enter and leave animation occur concurrently.\r\n *\r\n * @scope\r\n * @priority 400\r\n * @param {string=} onload Expression to evaluate whenever the view updates.\r\n *\r\n * @param {string=} autoscroll Whether `ngView` should call {@link ng.$anchorScroll\r\n *                  $anchorScroll} to scroll the viewport after the view is updated.\r\n *\r\n *                  - If the attribute is not set, disable scrolling.\r\n *                  - If the attribute is set without value, enable scrolling.\r\n *                  - Otherwise enable scrolling only if the `autoscroll` attribute value evaluated\r\n *                    as an expression yields a truthy value.\r\n * @example\r\n    <example name=\"ngView-directive\" module=\"ngViewExample\"\r\n             deps=\"angular-route.js;angular-animate.js\"\r\n             animations=\"true\" fixBase=\"true\">\r\n      <file name=\"index.html\">\r\n        <div ng-controller=\"MainCtrl as main\">\r\n          Choose:\r\n          <a href=\"Book/Moby\">Moby</a> |\r\n          <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\r\n          <a href=\"Book/Gatsby\">Gatsby</a> |\r\n          <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\r\n          <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\r\n\r\n          <div class=\"view-animate-container\">\r\n            <div ng-view class=\"view-animate\"></div>\r\n          </div>\r\n          <hr />\r\n\r\n          <pre>$location.path() = {{main.$location.path()}}</pre>\r\n          <pre>$route.current.templateUrl = {{main.$route.current.templateUrl}}</pre>\r\n          <pre>$route.current.params = {{main.$route.current.params}}</pre>\r\n          <pre>$routeParams = {{main.$routeParams}}</pre>\r\n        </div>\r\n      </file>\r\n\r\n      <file name=\"book.html\">\r\n        <div>\r\n          controller: {{book.name}}<br />\r\n          Book Id: {{book.params.bookId}}<br />\r\n        </div>\r\n      </file>\r\n\r\n      <file name=\"chapter.html\">\r\n        <div>\r\n          controller: {{chapter.name}}<br />\r\n          Book Id: {{chapter.params.bookId}}<br />\r\n          Chapter Id: {{chapter.params.chapterId}}\r\n        </div>\r\n      </file>\r\n\r\n      <file name=\"animations.css\">\r\n        .view-animate-container {\r\n          position:relative;\r\n          height:100px!important;\r\n          background:white;\r\n          border:1px solid black;\r\n          height:40px;\r\n          overflow:hidden;\r\n        }\r\n\r\n        .view-animate {\r\n          padding:10px;\r\n        }\r\n\r\n        .view-animate.ng-enter, .view-animate.ng-leave {\r\n          transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;\r\n\r\n          display:block;\r\n          width:100%;\r\n          border-left:1px solid black;\r\n\r\n          position:absolute;\r\n          top:0;\r\n          left:0;\r\n          right:0;\r\n          bottom:0;\r\n          padding:10px;\r\n        }\r\n\r\n        .view-animate.ng-enter {\r\n          left:100%;\r\n        }\r\n        .view-animate.ng-enter.ng-enter-active {\r\n          left:0;\r\n        }\r\n        .view-animate.ng-leave.ng-leave-active {\r\n          left:-100%;\r\n        }\r\n      </file>\r\n\r\n      <file name=\"script.js\">\r\n        angular.module('ngViewExample', ['ngRoute', 'ngAnimate'])\r\n          .config(['$routeProvider', '$locationProvider',\r\n            function($routeProvider, $locationProvider) {\r\n              $routeProvider\r\n                .when('/Book/:bookId', {\r\n                  templateUrl: 'book.html',\r\n                  controller: 'BookCtrl',\r\n                  controllerAs: 'book'\r\n                })\r\n                .when('/Book/:bookId/ch/:chapterId', {\r\n                  templateUrl: 'chapter.html',\r\n                  controller: 'ChapterCtrl',\r\n                  controllerAs: 'chapter'\r\n                });\r\n\r\n              $locationProvider.html5Mode(true);\r\n          }])\r\n          .controller('MainCtrl', ['$route', '$routeParams', '$location',\r\n            function MainCtrl($route, $routeParams, $location) {\r\n              this.$route = $route;\r\n              this.$location = $location;\r\n              this.$routeParams = $routeParams;\r\n          }])\r\n          .controller('BookCtrl', ['$routeParams', function BookCtrl($routeParams) {\r\n            this.name = 'BookCtrl';\r\n            this.params = $routeParams;\r\n          }])\r\n          .controller('ChapterCtrl', ['$routeParams', function ChapterCtrl($routeParams) {\r\n            this.name = 'ChapterCtrl';\r\n            this.params = $routeParams;\r\n          }]);\r\n\r\n      </file>\r\n\r\n      <file name=\"protractor.js\" type=\"protractor\">\r\n        it('should load and compile correct template', function() {\r\n          element(by.linkText('Moby: Ch1')).click();\r\n          var content = element(by.css('[ng-view]')).getText();\r\n          expect(content).toMatch(/controller: ChapterCtrl/);\r\n          expect(content).toMatch(/Book Id: Moby/);\r\n          expect(content).toMatch(/Chapter Id: 1/);\r\n\r\n          element(by.partialLinkText('Scarlet')).click();\r\n\r\n          content = element(by.css('[ng-view]')).getText();\r\n          expect(content).toMatch(/controller: BookCtrl/);\r\n          expect(content).toMatch(/Book Id: Scarlet/);\r\n        });\r\n      </file>\r\n    </example>\r\n */\r\n\r\n\r\n/**\r\n * @ngdoc event\r\n * @name ngView#$viewContentLoaded\r\n * @eventType emit on the current ngView scope\r\n * @description\r\n * Emitted every time the ngView content is reloaded.\r\n */\r\nngViewFactory.$inject = ['$route', '$anchorScroll', '$animate'];\r\nfunction ngViewFactory($route, $anchorScroll, $animate) {\r\n  return {\r\n    restrict: 'ECA',\r\n    terminal: true,\r\n    priority: 400,\r\n    transclude: 'element',\r\n    link: function(scope, $element, attr, ctrl, $transclude) {\r\n        var currentScope,\r\n            currentElement,\r\n            previousLeaveAnimation,\r\n            autoScrollExp = attr.autoscroll,\r\n            onloadExp = attr.onload || '';\r\n\r\n        scope.$on('$routeChangeSuccess', update);\r\n        update();\r\n\r\n        function cleanupLastView() {\r\n          if (previousLeaveAnimation) {\r\n            $animate.cancel(previousLeaveAnimation);\r\n            previousLeaveAnimation = null;\r\n          }\r\n\r\n          if (currentScope) {\r\n            currentScope.$destroy();\r\n            currentScope = null;\r\n          }\r\n          if (currentElement) {\r\n            previousLeaveAnimation = $animate.leave(currentElement);\r\n            previousLeaveAnimation.done(function(response) {\r\n              if (response !== false) previousLeaveAnimation = null;\r\n            });\r\n            currentElement = null;\r\n          }\r\n        }\r\n\r\n        function update() {\r\n          var locals = $route.current && $route.current.locals,\r\n              template = locals && locals.$template;\r\n\r\n          if (angular.isDefined(template)) {\r\n            var newScope = scope.$new();\r\n            var current = $route.current;\r\n\r\n            // Note: This will also link all children of ng-view that were contained in the original\r\n            // html. If that content contains controllers, ... they could pollute/change the scope.\r\n            // However, using ng-view on an element with additional content does not make sense...\r\n            // Note: We can't remove them in the cloneAttchFn of $transclude as that\r\n            // function is called before linking the content, which would apply child\r\n            // directives to non existing elements.\r\n            var clone = $transclude(newScope, function(clone) {\r\n              $animate.enter(clone, null, currentElement || $element).done(function onNgViewEnter(response) {\r\n                if (response !== false && angular.isDefined(autoScrollExp)\r\n                  && (!autoScrollExp || scope.$eval(autoScrollExp))) {\r\n                  $anchorScroll();\r\n                }\r\n              });\r\n              cleanupLastView();\r\n            });\r\n\r\n            currentElement = clone;\r\n            currentScope = current.scope = newScope;\r\n            currentScope.$emit('$viewContentLoaded');\r\n            currentScope.$eval(onloadExp);\r\n          } else {\r\n            cleanupLastView();\r\n          }\r\n        }\r\n    }\r\n  };\r\n}\r\n\r\n// This directive is called during the $transclude call of the first `ngView` directive.\r\n// It will replace and compile the content of the element with the loaded template.\r\n// We need this directive so that the element content is already filled when\r\n// the link function of another directive on the same element as ngView\r\n// is called.\r\nngViewFillContentFactory.$inject = ['$compile', '$controller', '$route'];\r\nfunction ngViewFillContentFactory($compile, $controller, $route) {\r\n  return {\r\n    restrict: 'ECA',\r\n    priority: -400,\r\n    link: function(scope, $element) {\r\n      var current = $route.current,\r\n          locals = current.locals;\r\n\r\n      $element.html(locals.$template);\r\n\r\n      var link = $compile($element.contents());\r\n\r\n      if (current.controller) {\r\n        locals.$scope = scope;\r\n        var controller = $controller(current.controller, locals);\r\n        if (current.controllerAs) {\r\n          scope[current.controllerAs] = controller;\r\n        }\r\n        $element.data('$ngControllerController', controller);\r\n        $element.children().data('$ngControllerController', controller);\r\n      }\r\n      scope[current.resolveAs || '$resolve'] = locals;\r\n\r\n      link(scope);\r\n    }\r\n  };\r\n}\r\n\r\n\r\n})(window, window.angular);"]}